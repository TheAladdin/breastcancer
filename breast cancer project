{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "fd1cda8d-71aa-4f64-a288-0c04d8324fc2",
   "metadata": {},
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "#tensor flow library to train and inference of deep neural networks.\n",
    "from tensorflow.keras import Sequential\n",
    "#Keras is the high-level API of the TensorFlow platform while adding the object of sequential which is A linear stack of layers.\n",
    "from tensorflow.keras.layers import Conv1D, MaxPool1D,Flatten,Dense,Dropout,BatchNormalization\n",
    "#The MaxPool1D layer downsamples the input by taking the maximum value over a spatial window (pool size)\n",
    "#The Flatten layer reshapes the output from previous layers into a 1D vector.\n",
    "#The Dense layer is a fully connected neural network layer.\n",
    "#The Dropout layer randomly sets a fraction of input units to zero during training.\n",
    "#The BatchNormalization layer normalizes the output of a previous layer.\n",
    "from tensorflow.keras.optimizers import Adam\n",
    "#The Adam optimizer is an iterative optimization algorithm used to improve the accuracy of neural network"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "0803bd24-5c82-499b-b91d-b9953b0b7235",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "#import numby library which is N-dimensional arrays (vectors and matrices) that are fast, versatile, and efficient for numerical computations.\n",
    "import pandas as pd\n",
    "#importing pandas which is DataFrame is a two-dimensional, size-mutable, and potentially heterogeneous tabular data structure in Python\n",
    "import matplotlib.pyplot as plt\n",
    "#Pyplot is a part of the Matplotlib library in Python. It provides a convenient interface for creating static plots and visualizations. \n",
    "import seaborn as sns\n",
    "#importig Seaborn is a Python data visualization library that integrates seamlessly with Matplotlib and Pandas data structures. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "31139871-a6b4-4f36-902f-6549260eb7a0",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import datasets,metrics\n",
    "#import the datasets and metric modules\n",
    "#the datasets is to provide several small toy datasets and larger real-world datasets \n",
    "#the metrics module contains various functions for evaluating the quality of predictions made by machine learning models.\n",
    "from sklearn.model_selection import train_test_split\n",
    "#The train_test_split function is used to split a dataset into training and testing subsets to evaluate model performance and preventing overfitting.\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "#The StandardScaler is a transformer module that standardizes features by removing the mean and scaling to unit variance.\n",
    "#its used here as transformer that standardizes features by removing the mean and scaling to unit variance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3b3792ca-9da2-457c-99cc-7c989878c2ff",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean radius</th>\n",
       "      <th>mean texture</th>\n",
       "      <th>mean perimeter</th>\n",
       "      <th>mean area</th>\n",
       "      <th>mean smoothness</th>\n",
       "      <th>mean compactness</th>\n",
       "      <th>mean concavity</th>\n",
       "      <th>mean concave points</th>\n",
       "      <th>mean symmetry</th>\n",
       "      <th>mean fractal dimension</th>\n",
       "      <th>...</th>\n",
       "      <th>worst radius</th>\n",
       "      <th>worst texture</th>\n",
       "      <th>worst perimeter</th>\n",
       "      <th>worst area</th>\n",
       "      <th>worst smoothness</th>\n",
       "      <th>worst compactness</th>\n",
       "      <th>worst concavity</th>\n",
       "      <th>worst concave points</th>\n",
       "      <th>worst symmetry</th>\n",
       "      <th>worst fractal dimension</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>17.99</td>\n",
       "      <td>10.38</td>\n",
       "      <td>122.80</td>\n",
       "      <td>1001.0</td>\n",
       "      <td>0.11840</td>\n",
       "      <td>0.27760</td>\n",
       "      <td>0.3001</td>\n",
       "      <td>0.14710</td>\n",
       "      <td>0.2419</td>\n",
       "      <td>0.07871</td>\n",
       "      <td>...</td>\n",
       "      <td>25.38</td>\n",
       "      <td>17.33</td>\n",
       "      <td>184.60</td>\n",
       "      <td>2019.0</td>\n",
       "      <td>0.1622</td>\n",
       "      <td>0.6656</td>\n",
       "      <td>0.7119</td>\n",
       "      <td>0.2654</td>\n",
       "      <td>0.4601</td>\n",
       "      <td>0.11890</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>20.57</td>\n",
       "      <td>17.77</td>\n",
       "      <td>132.90</td>\n",
       "      <td>1326.0</td>\n",
       "      <td>0.08474</td>\n",
       "      <td>0.07864</td>\n",
       "      <td>0.0869</td>\n",
       "      <td>0.07017</td>\n",
       "      <td>0.1812</td>\n",
       "      <td>0.05667</td>\n",
       "      <td>...</td>\n",
       "      <td>24.99</td>\n",
       "      <td>23.41</td>\n",
       "      <td>158.80</td>\n",
       "      <td>1956.0</td>\n",
       "      <td>0.1238</td>\n",
       "      <td>0.1866</td>\n",
       "      <td>0.2416</td>\n",
       "      <td>0.1860</td>\n",
       "      <td>0.2750</td>\n",
       "      <td>0.08902</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>19.69</td>\n",
       "      <td>21.25</td>\n",
       "      <td>130.00</td>\n",
       "      <td>1203.0</td>\n",
       "      <td>0.10960</td>\n",
       "      <td>0.15990</td>\n",
       "      <td>0.1974</td>\n",
       "      <td>0.12790</td>\n",
       "      <td>0.2069</td>\n",
       "      <td>0.05999</td>\n",
       "      <td>...</td>\n",
       "      <td>23.57</td>\n",
       "      <td>25.53</td>\n",
       "      <td>152.50</td>\n",
       "      <td>1709.0</td>\n",
       "      <td>0.1444</td>\n",
       "      <td>0.4245</td>\n",
       "      <td>0.4504</td>\n",
       "      <td>0.2430</td>\n",
       "      <td>0.3613</td>\n",
       "      <td>0.08758</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>11.42</td>\n",
       "      <td>20.38</td>\n",
       "      <td>77.58</td>\n",
       "      <td>386.1</td>\n",
       "      <td>0.14250</td>\n",
       "      <td>0.28390</td>\n",
       "      <td>0.2414</td>\n",
       "      <td>0.10520</td>\n",
       "      <td>0.2597</td>\n",
       "      <td>0.09744</td>\n",
       "      <td>...</td>\n",
       "      <td>14.91</td>\n",
       "      <td>26.50</td>\n",
       "      <td>98.87</td>\n",
       "      <td>567.7</td>\n",
       "      <td>0.2098</td>\n",
       "      <td>0.8663</td>\n",
       "      <td>0.6869</td>\n",
       "      <td>0.2575</td>\n",
       "      <td>0.6638</td>\n",
       "      <td>0.17300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>20.29</td>\n",
       "      <td>14.34</td>\n",
       "      <td>135.10</td>\n",
       "      <td>1297.0</td>\n",
       "      <td>0.10030</td>\n",
       "      <td>0.13280</td>\n",
       "      <td>0.1980</td>\n",
       "      <td>0.10430</td>\n",
       "      <td>0.1809</td>\n",
       "      <td>0.05883</td>\n",
       "      <td>...</td>\n",
       "      <td>22.54</td>\n",
       "      <td>16.67</td>\n",
       "      <td>152.20</td>\n",
       "      <td>1575.0</td>\n",
       "      <td>0.1374</td>\n",
       "      <td>0.2050</td>\n",
       "      <td>0.4000</td>\n",
       "      <td>0.1625</td>\n",
       "      <td>0.2364</td>\n",
       "      <td>0.07678</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 30 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   mean radius  mean texture  mean perimeter  mean area  mean smoothness  \\\n",
       "0        17.99         10.38          122.80     1001.0          0.11840   \n",
       "1        20.57         17.77          132.90     1326.0          0.08474   \n",
       "2        19.69         21.25          130.00     1203.0          0.10960   \n",
       "3        11.42         20.38           77.58      386.1          0.14250   \n",
       "4        20.29         14.34          135.10     1297.0          0.10030   \n",
       "\n",
       "   mean compactness  mean concavity  mean concave points  mean symmetry  \\\n",
       "0           0.27760          0.3001              0.14710         0.2419   \n",
       "1           0.07864          0.0869              0.07017         0.1812   \n",
       "2           0.15990          0.1974              0.12790         0.2069   \n",
       "3           0.28390          0.2414              0.10520         0.2597   \n",
       "4           0.13280          0.1980              0.10430         0.1809   \n",
       "\n",
       "   mean fractal dimension  ...  worst radius  worst texture  worst perimeter  \\\n",
       "0                 0.07871  ...         25.38          17.33           184.60   \n",
       "1                 0.05667  ...         24.99          23.41           158.80   \n",
       "2                 0.05999  ...         23.57          25.53           152.50   \n",
       "3                 0.09744  ...         14.91          26.50            98.87   \n",
       "4                 0.05883  ...         22.54          16.67           152.20   \n",
       "\n",
       "   worst area  worst smoothness  worst compactness  worst concavity  \\\n",
       "0      2019.0            0.1622             0.6656           0.7119   \n",
       "1      1956.0            0.1238             0.1866           0.2416   \n",
       "2      1709.0            0.1444             0.4245           0.4504   \n",
       "3       567.7            0.2098             0.8663           0.6869   \n",
       "4      1575.0            0.1374             0.2050           0.4000   \n",
       "\n",
       "   worst concave points  worst symmetry  worst fractal dimension  \n",
       "0                0.2654          0.4601                  0.11890  \n",
       "1                0.1860          0.2750                  0.08902  \n",
       "2                0.2430          0.3613                  0.08758  \n",
       "3                0.2575          0.6638                  0.17300  \n",
       "4                0.1625          0.2364                  0.07678  \n",
       "\n",
       "[5 rows x 30 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cancerData = datasets.load_breast_cancer()\n",
    "X = pd.DataFrame(data = cancerData.data, columns=cancerData.feature_names )\n",
    "X.head()\n",
    "#loaded the Breast Cancer Wisconsin dataset using datasets.load_breast_cancer() from scikit-learn. \n",
    "#This dataset is a classic and straightforward binary classification dataset\n",
    "#The resulting DataFrame X contains 30 features (columns), each representing different characteristics of breast cancer samples. \n",
    "#The rows correspond to individual samples."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "856806ab-9df2-4e87-a53f-466400b51f07",
   "metadata": {},
   "outputs": [],
   "source": [
    "y = cancerData.target"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e0d64623-0d7a-4cd7-867b-73fd12211a57",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(569, 30)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.shape\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d51b39df-6ff7-4173-9c28-564311c13a0e",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train,X_test,y_train,y_test= train_test_split(X,y,test_size=0.1,stratify=y)\n",
    "#setting the trian and test for the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "cb007570-3b54-4400-8908-96ce78a44c1f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(512, 30)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.shape\n",
    "#figure the shape of the X train model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "60fd0fc7-733f-441a-b86a-fd230168d4bc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(57,)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test.shape\n",
    "#figure the shape of the Y test model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e9b615c5-e067-4f85-a1c2-9d2716d6fc5f",
   "metadata": {},
   "outputs": [],
   "source": [
    "scaler = StandardScaler()\n",
    "#The StandardScaler standardizes features by removing the mean and scaling them to have a unit variance.\n",
    "#It ensures that each feature has a mean of approximately 0 and a standard deviation of approximately 1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "294b8c8b-3be8-48df-b759-90b5305864fd",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train = scaler.fit_transform(X_train)\n",
    "\n",
    "#scaler.fit_transform(X_train) computes the mean and standard deviation for each feature in the training data (X_train).\n",
    "#It then scales the features based on these statistics.\n",
    "#The transformed X_train now has a mean of 0 and a standard deviation of 1 for each feature.\n",
    "\n",
    "X_test = scaler.transform(X_test)\n",
    "\n",
    "#scaler.transform(X_test) applies the same scaling transformation to the testing data (X_test).\n",
    "#It uses the mean and standard deviation learned from the training data.\n",
    "#This ensures that the testing data is scaled consistently with the training data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "e9308667-060d-4c69-8dd9-a3fa78781f30",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train = X_train.reshape(512,30,1)\n",
    "\n",
    "#X_train.reshape(512, 30, 1) modifies the shape of the training data (X_train).\n",
    "#The original shape was (512, 30), and now it becomes (512, 30, 1).\n",
    "#The third dimension of size 1 indicates that each sample has a single feature (e.g., time series data).\n",
    "\n",
    "X_test = X_test.reshape(57,30,1)\n",
    "\n",
    "#Similarly, X_test.reshape(57, 30, 1) reshapes the testing data (X_test).\n",
    "#It ensures that the testing data has the same shape as the training data.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "6e37331a-c788-48d9-b4dc-e991acc0884a",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = Sequential()\n",
    "model.add(Conv1D(filters=16,kernel_size=2,activation='relu',input_shape=(30,1)))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Dropout(0.2))\n",
    "\n",
    "model.add(Conv1D(32,2,activation='relu'))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Dropout(0.2))\n",
    "\n",
    "model.add(Flatten())\n",
    "model.add(Dense(32,activation='relu'))\n",
    "model.add(Dropout(0.2))\n",
    "\n",
    "model.add(Dense(1,activation='sigmoid'))\n",
    "\n",
    "#this model is to processes sequences of length 30 which is the features held before that aims to predict binary outcomes using Conv1D layers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "9a50c7f6-bc59-42a7-befc-7614ef84ed96",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " conv1d (Conv1D)             (None, 29, 16)            48        \n",
      "                                                                 \n",
      " batch_normalization (Batch  (None, 29, 16)            64        \n",
      " Normalization)                                                  \n",
      "                                                                 \n",
      " dropout (Dropout)           (None, 29, 16)            0         \n",
      "                                                                 \n",
      " conv1d_1 (Conv1D)           (None, 28, 32)            1056      \n",
      "                                                                 \n",
      " batch_normalization_1 (Bat  (None, 28, 32)            128       \n",
      " chNormalization)                                                \n",
      "                                                                 \n",
      " dropout_1 (Dropout)         (None, 28, 32)            0         \n",
      "                                                                 \n",
      " flatten (Flatten)           (None, 896)               0         \n",
      "                                                                 \n",
      " dense (Dense)               (None, 32)                28704     \n",
      "                                                                 \n",
      " dropout_2 (Dropout)         (None, 32)                0         \n",
      "                                                                 \n",
      " dense_1 (Dense)             (None, 1)                 33        \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 30033 (117.32 KB)\n",
      "Trainable params: 29937 (116.94 KB)\n",
      "Non-trainable params: 96 (384.00 Byte)\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "f23867ba-ffda-48a9-b62d-2fcd8699e5fe",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.compile(optimizer=Adam(learning_rate=0.0001),loss='binary_crossentropy',metrics=['accuracy'])\n",
    "#model.compile() prepares the neural network for training by specifying the optimizer, loss function, and evaluation metrics. \n",
    "#Once compiled, we can proceed to train the model "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "b496aae3-f149-4944-ba20-224907876a37",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/35\n",
      "16/16 [==============================] - 4s 36ms/step - loss: 0.6412 - accuracy: 0.6445 - val_loss: 0.6513 - val_accuracy: 0.8070\n",
      "Epoch 2/35\n",
      "16/16 [==============================] - 0s 17ms/step - loss: 0.4460 - accuracy: 0.8008 - val_loss: 0.5997 - val_accuracy: 0.9474\n",
      "Epoch 3/35\n",
      "16/16 [==============================] - 0s 12ms/step - loss: 0.3068 - accuracy: 0.8828 - val_loss: 0.5508 - val_accuracy: 0.9298\n",
      "Epoch 4/35\n",
      "16/16 [==============================] - 0s 11ms/step - loss: 0.2857 - accuracy: 0.8828 - val_loss: 0.5072 - val_accuracy: 0.9298\n",
      "Epoch 5/35\n",
      "16/16 [==============================] - 0s 7ms/step - loss: 0.2460 - accuracy: 0.8984 - val_loss: 0.4649 - val_accuracy: 0.9298\n",
      "Epoch 6/35\n",
      "16/16 [==============================] - 0s 8ms/step - loss: 0.2369 - accuracy: 0.9121 - val_loss: 0.4253 - val_accuracy: 0.9123\n",
      "Epoch 7/35\n",
      "16/16 [==============================] - 0s 9ms/step - loss: 0.1977 - accuracy: 0.9160 - val_loss: 0.3890 - val_accuracy: 0.9298\n",
      "Epoch 8/35\n",
      "16/16 [==============================] - 0s 10ms/step - loss: 0.2048 - accuracy: 0.9199 - val_loss: 0.3549 - val_accuracy: 0.9298\n",
      "Epoch 9/35\n",
      "16/16 [==============================] - 0s 7ms/step - loss: 0.1476 - accuracy: 0.9512 - val_loss: 0.3243 - val_accuracy: 0.9298\n",
      "Epoch 10/35\n",
      "16/16 [==============================] - 0s 9ms/step - loss: 0.1475 - accuracy: 0.9434 - val_loss: 0.2968 - val_accuracy: 0.9298\n",
      "Epoch 11/35\n",
      "16/16 [==============================] - 0s 10ms/step - loss: 0.1622 - accuracy: 0.9473 - val_loss: 0.2718 - val_accuracy: 0.9298\n",
      "Epoch 12/35\n",
      "16/16 [==============================] - 0s 9ms/step - loss: 0.1489 - accuracy: 0.9551 - val_loss: 0.2467 - val_accuracy: 0.9298\n",
      "Epoch 13/35\n",
      "16/16 [==============================] - 0s 7ms/step - loss: 0.1377 - accuracy: 0.9570 - val_loss: 0.2251 - val_accuracy: 0.9298\n",
      "Epoch 14/35\n",
      "16/16 [==============================] - 0s 7ms/step - loss: 0.1407 - accuracy: 0.9492 - val_loss: 0.2062 - val_accuracy: 0.9474\n",
      "Epoch 15/35\n",
      "16/16 [==============================] - 0s 6ms/step - loss: 0.1295 - accuracy: 0.9473 - val_loss: 0.1908 - val_accuracy: 0.9474\n",
      "Epoch 16/35\n",
      "16/16 [==============================] - 0s 8ms/step - loss: 0.1325 - accuracy: 0.9570 - val_loss: 0.1777 - val_accuracy: 0.9474\n",
      "Epoch 17/35\n",
      "16/16 [==============================] - 0s 7ms/step - loss: 0.1290 - accuracy: 0.9551 - val_loss: 0.1649 - val_accuracy: 0.9474\n",
      "Epoch 18/35\n",
      "16/16 [==============================] - 0s 6ms/step - loss: 0.1271 - accuracy: 0.9570 - val_loss: 0.1523 - val_accuracy: 0.9474\n",
      "Epoch 19/35\n",
      "16/16 [==============================] - 0s 8ms/step - loss: 0.1155 - accuracy: 0.9551 - val_loss: 0.1460 - val_accuracy: 0.9474\n",
      "Epoch 20/35\n",
      "16/16 [==============================] - 0s 7ms/step - loss: 0.1224 - accuracy: 0.9551 - val_loss: 0.1378 - val_accuracy: 0.9474\n",
      "Epoch 21/35\n",
      "16/16 [==============================] - 0s 7ms/step - loss: 0.1239 - accuracy: 0.9531 - val_loss: 0.1300 - val_accuracy: 0.9474\n",
      "Epoch 22/35\n",
      "16/16 [==============================] - 0s 7ms/step - loss: 0.0976 - accuracy: 0.9629 - val_loss: 0.1240 - val_accuracy: 0.9474\n",
      "Epoch 23/35\n",
      "16/16 [==============================] - 0s 7ms/step - loss: 0.0929 - accuracy: 0.9766 - val_loss: 0.1171 - val_accuracy: 0.9474\n",
      "Epoch 24/35\n",
      "16/16 [==============================] - 0s 7ms/step - loss: 0.0812 - accuracy: 0.9766 - val_loss: 0.1101 - val_accuracy: 0.9649\n",
      "Epoch 25/35\n",
      "16/16 [==============================] - 0s 6ms/step - loss: 0.1117 - accuracy: 0.9551 - val_loss: 0.1045 - val_accuracy: 0.9649\n",
      "Epoch 26/35\n",
      "16/16 [==============================] - 0s 7ms/step - loss: 0.0841 - accuracy: 0.9766 - val_loss: 0.1035 - val_accuracy: 0.9649\n",
      "Epoch 27/35\n",
      "16/16 [==============================] - 0s 7ms/step - loss: 0.0827 - accuracy: 0.9746 - val_loss: 0.1009 - val_accuracy: 0.9649\n",
      "Epoch 28/35\n",
      "16/16 [==============================] - 0s 7ms/step - loss: 0.0897 - accuracy: 0.9766 - val_loss: 0.0985 - val_accuracy: 0.9649\n",
      "Epoch 29/35\n",
      "16/16 [==============================] - 0s 8ms/step - loss: 0.0907 - accuracy: 0.9688 - val_loss: 0.0981 - val_accuracy: 0.9649\n",
      "Epoch 30/35\n",
      "16/16 [==============================] - 0s 7ms/step - loss: 0.0725 - accuracy: 0.9727 - val_loss: 0.0965 - val_accuracy: 0.9649\n",
      "Epoch 31/35\n",
      "16/16 [==============================] - 0s 6ms/step - loss: 0.0970 - accuracy: 0.9648 - val_loss: 0.0931 - val_accuracy: 0.9649\n",
      "Epoch 32/35\n",
      "16/16 [==============================] - 0s 6ms/step - loss: 0.0871 - accuracy: 0.9648 - val_loss: 0.0913 - val_accuracy: 0.9649\n",
      "Epoch 33/35\n",
      "16/16 [==============================] - 0s 10ms/step - loss: 0.0728 - accuracy: 0.9746 - val_loss: 0.0890 - val_accuracy: 0.9649\n",
      "Epoch 34/35\n",
      "16/16 [==============================] - 0s 7ms/step - loss: 0.0653 - accuracy: 0.9746 - val_loss: 0.0880 - val_accuracy: 0.9649\n",
      "Epoch 35/35\n",
      "16/16 [==============================] - 0s 7ms/step - loss: 0.0717 - accuracy: 0.9785 - val_loss: 0.0875 - val_accuracy: 0.9649\n"
     ]
    }
   ],
   "source": [
    "history = model.fit(X_train,y_train,epochs=35,verbose=1,validation_data=(X_test,y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "05e24196-7501-47cc-aad7-0b5558935ef1",
   "metadata": {},
   "outputs": [],
   "source": [
    "def plotLearningCurve(history,epochs):\n",
    "#plotLearningCurve function can be used to visualize the learning curve of a machine learning model.The function takes two arguments:\n",
    "#history: This should be the training history returned by Keras during model training (usually obtained from model.fit()).\n",
    "#epochs: The total number of training epochs.\n",
    "\n",
    "  epochRange = range(1,epochs+1)\n",
    "  plt.plot(epochRange,history.history['accuracy'])\n",
    "  plt.plot(epochRange,history.history['val_accuracy'])\n",
    "  plt.title('Model Accuracy')\n",
    "  plt.xlabel('Epoch')\n",
    "  plt.ylabel('Accuracy')\n",
    "  plt.legend(['Train','Validation'],loc='upper left')\n",
    "  plt.show()\n",
    "\n",
    "  plt.plot(epochRange,history.history['loss'])\n",
    "  plt.plot(epochRange,history.history['val_loss'])\n",
    "  plt.title('Model Loss')\n",
    "  plt.xlabel('Epoch')\n",
    "  plt.ylabel('Loss')\n",
    "  plt.legend(['Train','Validation'],loc='upper left')\n",
    "  plt.show()\n",
    "    #The plt.show() function displays the plots."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "f6bc21a2-6637-44ec-9ca0-666d49814450",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plotLearningCurve(history,35)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
